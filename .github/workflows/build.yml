name: cpp-cmake-mingw-prebuilt-release-actions-workflow
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'c*'

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
#     env:
#       libraryName: libsndfile
#       cmakeInstallationPath: libsndfile-installation
#       tagName: 1.2.0 # target tag
#       mingwTargetZip: libsndfile-${{ github.ref_name }}-mingw64-x86_64-posix-seh-rev0-8.1.0.zip
    steps:
      - uses: actions/checkout@v3
        with:
           repository: raspberrypi/linux
           fetch-depth: 1
           ref: rpi-6.1.y
           clean: true
#            path: rpi-6.1.y
           
      - run: |
          sudo apt-get update
          
      - run: |
          sudo apt-get -y --no-install-recommends install build-essential
          
      - run: |
          sudo apt-get -y --no-install-recommends install bison
          
      - run: |
          sudo apt-get -y --no-install-recommends install flex
        
      - run: |
          sudo apt-get -y --no-install-recommends install libssl-dev
          
      - run: |
          sudo apt-get -y --no-install-recommends install libelf-dev
          
      - run: |
          sudo apt-get -y --no-install-recommends install bc
          
      - run: |
          sudo apt-get -y --no-install-recommends install curl
          
      - run: |
          sudo apt-get -y --no-install-recommends install ca-certificates
          
        # arm64
      - run: |
          sudo apt-get -y --no-install-recommends install gcc-aarch64-linux-gnu
          
#       - run: |
#           sudo apt-get clean && \
#           sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          
#       - run: |
#           curl https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.12.10.tar.xz -L -O -J && \
#           tar -xf linux-5.12.10.tar.xz
          
#       - run: |
#           cd linux-5.12.10 && \
#           cp ../.config .config && \
#           make olddefconfig  && \
#           make -j8
      - name: Build kernel
        run: |
          mkdir ${{github.workspace}}/build
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export DTS_SUBDIR=broadcom
          export IMAGE=Image.gz
          make O=${{github.workspace}}/build bcm2711_defconfig
          scripts/config --file ${{github.workspace}}/build/.config --set-val CONFIG_WERROR y
          make O=${{github.workspace}}/build -j ${{env.NUM_JOBS}} $IMAGE modules dtbs
          mkdir -p ${{github.workspace}}/install/boot/overlays
          make O=${{github.workspace}}/build INSTALL_MOD_PATH=${{github.workspace}}/install modules_install
          cp ${{github.workspace}}/build/arch/${ARCH}/boot/dts/${DTS_SUBDIR}/*.dtb ${{github.workspace}}/install/boot/
          cp ${{github.workspace}}/build/arch/${ARCH}/boot/dts/overlays/*.dtb* ${{github.workspace}}/install/boot/overlays/
          cp ${{github.workspace}}/arch/${ARCH}/boot/dts/overlays/README ${{github.workspace}}/install/boot/overlays/
          cp ${{github.workspace}}/build/arch/${ARCH}/boot/$IMAGE ${{github.workspace}}/install/boot/kernel8.img
          
      - name: Tar build
        run: tar -cvf bcm2711_arm64_build.tar -C ${{github.workspace}}/install .

      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "bcm2711_arm64_build.tar"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
